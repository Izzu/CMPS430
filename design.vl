module FSM(start, maxCarNS, maxCarWE, s1, s2, reset, clock, state, p1, p2);
	
	input start, maxCar, s1, s2, reset, clock, violated;
	output [2:0]state;
	output violation;
	reg[2:0]state;
	reg cState, nState, weJustWent=0;
	parameter RR=0, GR=1, YR=2, RR2=3, RG=4, RY=5; 	//1st letter is for N & S, 2nd is for W & E

	always@(state or start or maxCarNS, maxCarWE)
		begin:Caluculate_Next_State
			case(cState
				//NS = red, WE = red
				RR:begin
					if(start)
						if(!weJustWent)		//if WE just went then always let NS go					
							if(maxCarWE) 
								nState = RG;
							else 
								nState = GR;
						else 
							nState = GR;
					else 
						nState = RR;

					if(s1) 
						p2 = 1;		//if car WE violates traffic law turn picture sensor on
					else 
						p2 = 0;
					if(s2) 
						p1 = 1;		//if car NS violates traffic law turn picture sensor on
					else 
						p1 = 0;
					end

				//NS = green, WE = red
				GR:begin
					nState = YR;
					weJustWent = 0;
					if(maxCarWE) 
						clock = ~clock;  //Change the clock and go to next state when there is traffic
					if(s1) 
						p2 = 1;		//if car WE violates traffic law turn picture sensor on
					else 
						p2 = 0;
					end

				//NS = yello, WE = red
				YR:begin
					nState = RR2;
					if(s1) 
						p2 = 1;		//if car WE violates traffic law turn picture sensor on
					else 
						p2 = 0;
					end

				//NS = red, WE = red
				RR2:begin
					nState = RG;
					if(s1) 
						p2 = 1;		//if car WE violates traffic law turn picture sensor on
					else 
						p2 = 0;
					if(s2) 
						p1 = 1;		//if car NS violates traffic law turn picture sensor on
					else 
						p1 = 0;
					end

				//NS = red, WE = green
				RG:begin
					weJustWent = 1;
					nState = RY;
					if(maxCarWE) 
						clock = ~clock;  //Change the clock and go to next state when there is traffic
					if(s2) 
						p1 = 1;		//if car NS violates traffic law turn picture sensor on
					else 
						p1 = 0;
					end

				//NS = red, WE = yellow
				RY:begin
					nState = RR;
					if(s2) 
						p1 = 1;		//if car NS violates traffic law turn picture sensor on
					else 
						p1 = 0;
					end

				default: nState = RR;
			endcase
		end

	always@(posedge clock or posedge reset)
		begin:RegGen
			if(reset) 
				state = RR;
			else 
				cState = nState;
		end

	always@(state)
		begin:PrintOut
			case(cState)
				RR: state = 3'b000;
				GR: state = 3'b001;
				YR: state = 3'b010;
				RR2: state = 3'b011;
				RG: state = 3'b100;
				RY: state = 3'b101;
				default: state = 3'b111;
			endcase
		end

endmodule;